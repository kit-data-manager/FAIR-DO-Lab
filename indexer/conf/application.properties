# General Spring Boot Settings (do not change!)
spring.main.allow-bean-definition-overriding=true

# Server Settings for defining port and security
server.port: 8095

# Data transfer settings, e.g. transfer compression and multipart message size. 
# The properties max-file-size and max-request-size define the maximum size of files 
# transferred to and from the repository. Setting them to -1 removes all limits.
server.compression.enabled: false
spring.servlet.multipart.max-file-size: 100MB
spring.servlet.multipart.max-request-size: 100MB

#logging settings
logging.level.root: ERROR
#logging.level.edu.kit: DEBUG
#logging.level.org.springframework:DEBUG
#logging.level.org.springframework.amqp: WARN
logging.level.edu.kit.datamanager.messaging.client: TRACE
logging.level.edu.kit.datamanager.indexer: TRACE


################################################################
##################  Indexer Specific Settings ##################
################################################################

# A list of filenames, stored in the classpath (i.e. java/main/resources)
# which will be used to map the records into elastic-compatible json.
# 
# Example: indexer.recordMapping.mappingFiles: mytemplate,yourtemplate
# (Assuming your files are in the classpaths root and named mytemplate.hbs
# and yourtemplate.hbs)
indexer.recordMapping.mappingFiles: mytemplate

# The subfolder where the json files, which are ingested into elasticsearch
# are stored locally. This might be useful as a backup.
indexer.elastic.folder: /elastic_json

# The base URL of the elasticsearch service, including port.
indexer.elastic.baseUrl: http://elasticsearch:9200

# The elastic index ("database") where the records will be stored into.
indexer.elastic.index: /record



###################################################################
##################  Repository Specific Settings ##################
###################################################################
repo.basepath:  file:///tmp

# Enable/disable (default) authentication. If authentication is enabled, a separate 
# Authentication Service should be used in order to obtain JSON Web Tokens holding 
# login information. The token has then to be provided within the Authentication header
# of each HTTP request with a value of 'Bearer <TOKEN>' without quotes, replacing <TOKEN>
# be the token obtained from the authentication service.
repo.auth.enabled: false

# The jwtSecret is the mutual secret between all trusted services. This means, that if
# authentication is enabled, the jwtSecret used by the Authentication Service to sign
# issued JWTokens must be the same as the jwtSecret of the repository in order to 
# be able to validate the signature. By default, the secret should be selected randomly
# and with a sufficient length.
repo.auth.jwtSecret:test123

# Enable (default)/disable messaging. The messaging functionality requires a RabbitMQ
# server receiving and distributing the messages sent by the repository. The server is 
# accessed via repo.messaging.hostname and repo.messaging.port 
# The property 'repo.messaging.topic' defines the topic where messages are sent, whereas 
# the all properties with 'binding' define from where messages are received, e.g. the 
# exchange aka. topic and the queue. The routingKeys are defining wich messages are 
# routed to the aforementioned queue.
repo.messaging.enabled: true
repo.messaging.hostname: messagebroker
repo.messaging.port: 5672
repo.messaging.receiver.exchange: record_events
repo.messaging.receiver.queue: indexerQueue
repo.messaging.receiver.routingKeys: pidrecord.#

# The rate in milliseconds at which the repository itself will check for new messages.
# E.g. if a resource has been created, the repository may has to perform additional
# ingest steps. Therefor, special handlers can be added which will be executed at the
# configured repo.schedule.rate if a new message has been received.
repo.schedule.rate:1000

# Enable (default)/disable audit functionalities. Auditing captures on the one hand 
# information about events occured at managed resources, e.g. create, update, delete 
# events, on the other hand the audit functionalty enabled versioning of resources.
repo.audit.enabled:true

##################################################
######### Gemma Metadata Mapping Plugin ##########
##################################################

# Absolute path to the local python interpreter
repo.plugin.gemma.pythonLocation:/usr/local/bin/python3
# Absolute path to the local gemma mapping script mapping_single.py' 
repo.plugin.gemma.gemmaLocation:/Users/pfeil/git/gemma/mapping_single.py
# Absolute path to the local gemma mappings folder
repo.plugin.gemma.mappingsLocation:/Users/pfeil/git/gemma-plugin/mappings
# List of schema mappings containing the content type as key in squared brackets and the 
# according mapping filename as value. The mapping filename must be located at 
# 'repo.plugin.gemma.mappingsLocation'.
repo.plugin.gemma.schemaMappings[application/vnd.datamanager.data-resource+json]:simple_mapping.json
repo.plugin.gemma.schemaMappings[application/json]:simple_mapping.json
